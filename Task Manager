import random
import time

# Constants for the game
ROOMS = ["Entrance", "Hallway", "Library", "Armory", "Dungeon", "Treasure Room", "Cavern", "Hall of Mirrors", "Dragon Lair", "Royal Chamber"]
ITEMS = ["Health Potion", "Sword", "Shield", "Gold", "Map", "Mystic Stone", "Cursed Amulet", "Ring of Power"]
ENEMIES = ["Goblin", "Orc", "Troll", "Dragon", "Vampire", "Witch", "Demon", "Specter", "Giant"]
MAX_HEALTH = 100
ENEMY_DAMAGE = {"Goblin": 10, "Orc": 15, "Troll": 25, "Dragon": 40, "Vampire": 20, "Witch": 18, "Demon": 30, "Specter": 12, "Giant": 35}

# Utility function for pauses
def pause(message=""):
    if message:
        print(message)
    input("\nPress Enter to continue...")

# Player class
class Player:
    def __init__(self, name):
        self.name = name
        self.health = MAX_HEALTH
        self.inventory = []
        self.attack_power = 10
        self.defense = 0
        self.current_room = 0
        self.gold = 0

    def __str__(self):
        return f"{self.name} - Health: {self.health} | Attack Power: {self.attack_power} | Defense: {self.defense} | Gold: {self.gold} | Inventory: {self.inventory}"

    def take_damage(self, damage):
        damage -= self.defense
        if damage < 0:
            damage = 0
        self.health -= damage
        if self.health <= 0:
            self.health = 0

    def heal(self, amount):
        self.health += amount
        if self.health > MAX_HEALTH:
            self.health = MAX_HEALTH

    def add_item(self, item):
        self.inventory.append(item)

    def remove_item(self, item):
        if item in self.inventory:
            self.inventory.remove(item)

    def attack(self, enemy):
        damage = random.randint(self.attack_power - 3, self.attack_power + 3)
        print(f"{self.name} attacks {enemy.name} and deals {damage} damage.")
        enemy.take_damage(damage)

# Enemy class
class Enemy:
    def __init__(self, name):
        self.name = name
        self.health = random.randint(30, 80)
        self.attack_power = random.randint(5, 20)
        self.defense = random.randint(0, 5)

    def __str__(self):
        return f"{self.name} - Health: {self.health} | Attack Power: {self.attack_power} | Defense: {self.defense}"

    def take_damage(self, damage):
        damage -= self.defense
        if damage < 0:
            damage = 0
        self.health -= damage
        if self.health <= 0:
            self.health = 0

    def attack(self, player):
        damage = random.randint(self.attack_power - 5, self.attack_power + 5)
        print(f"{self.name} attacks {player.name} and deals {damage} damage.")
        player.take_damage(damage)

# Item class
class Item:
    def __init__(self, name, effect, description=""):
        self.name = name
        self.effect = effect
        self.description = description

    def __str__(self):
        return f"{self.name}: {self.description}"

    def use(self, player):
        print(f"{player.name} uses {self.name}. {self.effect}")
        if "heal" in self.effect:
            healing_amount = int(self.effect.split(" ")[1])
            player.heal(healing_amount)
        player.remove_item(self.name)

# Room class
class Room:
    def __init__(self, name, description, has_enemy=False, enemy=None, item=None):
        self.name = name
        self.description = description
        self.has_enemy = has_enemy
        self.enemy = enemy
        self.item = item
        self.explored = False

    def enter(self, player):
        print(f"\nYou enter the {self.name}. {self.description}")
        if self.explored:
            print(f"You've already explored this room.")
            return
        if self.has_enemy:
            pause()
            self.fight(player)
        elif self.item:
            pause(f"A {self.item} is here!")
            player.add_item(self.item.name)
            print(f"You pick up the {self.item}.")
        else:
            print("There's nothing of interest here.")
        self.explored = True
        pause()

    def fight(self, player):
        print(f"An enemy, {self.enemy.name}, appears!")
        while self.enemy.health > 0 and player.health > 0:
            player.attack(self.enemy)
            if self.enemy.health > 0:
                self.enemy.attack(player)
            if player.health <= 0:
                print("You have been defeated!")
                break
        if player.health > 0:
            print(f"You defeated the {self.enemy.name}!")
            pause()

# Shop class
class Shop:
    def __init__(self):
        self.items_for_sale = [
            Item("Health Potion", "heal 20", "Restores 20 health points."),
            Item("Sword", "increase attack", "Increases your attack power."),
            Item("Shield", "increase defense", "Increases your defense."),
            Item("Gold Coin", "increase gold", "Adds 10 gold to your inventory.")
        ]

    def show_items(self):
        print("\nWelcome to the shop! Here are the items available for purchase:")
        for idx, item in enumerate(self.items_for_sale):
            print(f"{idx + 1}. {item.name} - {item.effect} | Price: 10 Gold")

    def sell_item(self, player, item_choice):
        if item_choice < 1 or item_choice > len(self.items_for_sale):
            print("Invalid choice!")
            return
        item = self.items_for_sale[item_choice - 1]
        if player.gold >= 10:
            player.gold -= 10
            player.add_item(item)
            print(f"You bought {item.name} for 10 Gold.")
        else:
            print("You don't have enough gold to buy this item.")

# Game class
class Game:
    def __init__(self):
        self.player = None
        self.rooms = self.create_rooms()
        self.shop = Shop()
        self.game_over = False
        self.current_shop = False

    def create_rooms(self):
        room_list = []
        for room_name in ROOMS:
            description = f"This is the {room_name}."
            has_enemy = random.choice([True, False])
            enemy = None
            item = None
            if has_enemy:
                enemy = Enemy(random.choice(ENEMIES))
            if random.random() < 0.5:
                item = Item(random.choice(ITEMS), random.choice(["heal 20", "increase attack", "increase defense"]))
            room_list.append(Room(room_name, description, has_enemy, enemy, item))
        return room_list

    def start_game(self):
        name = input("Enter your character's name: ")
        self.player = Player(name)
        print(f"Welcome to the dungeon, {self.player.name}!")
        pause()

        while not self.game_over:
            self.show_status()
            self.show_room_options()
            choice = self.get_choice()
            self.process_choice(choice)

    def show_status(self):
        print(f"\n{self.player}\n")
    
    def show_room_options(self):
        print("\nWhere do you want to go?")
        for idx, room in enumerate(self.rooms):
            print(f"{idx + 1}. {room.name}")
        print(f"{len(self.rooms) + 1}. Visit Shop")

    def get_choice(self):
        while True:
            try:
                choice = int(input("Choose a room or shop (1-11): "))
                if 1 <= choice <= len(self.rooms) + 1:
                    return choice - 1
                else:
                    print("Invalid choice, try again.")
            except ValueError:
                print("Invalid input. Please enter a number.")

    def process_choice(self, choice):
        if choice == len(self.rooms):
            self.visit_shop()
        else:
            room = self.rooms[choice]
            room.enter(self.player)
            if self.player.health <= 0:
                print("Game Over!")
                self.game_over = True

        self.player.current_room = choice
        self.check_for_endgame()

    def check_for_endgame(self):
        if self.player.current_room == len(self.rooms) - 1:
            print("You have reached the Treasure Room!")
            self.game_over = True

    def visit_shop(self):
        self.shop.show_items()
        item_choice = int(input("Choose an item to buy (1-4): "))
        self.shop.sell_item(self.player, item_choice)
        pause()

# Main loop to start the game
if __name__ == "__main__":
    game = Game()
    game.start_game()

